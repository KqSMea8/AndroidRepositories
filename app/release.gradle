//上传到远程仓库
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'com.android.library'



android {
    //重命名工程
    libraryVariants.all { variant ->
        variant.outputs.all {
            outputFileName = projectName + "-" + "RELEASE.aar";
            println("build file:" + outputFileName.toString())
        }
    }
}

//发布本地仓库
uploadArchives {
    repositories.mavenDeployer {
        // 配置本地仓库路径，项目根目录下的repository目录中
        repository(url: uri('../../../AndroidRepositories/')) {
            authentication(userName: "admin", password: "admin123")
        }
        pom.groupId = GROUP// 唯一标识（通常为模块包名，也可以任意）
        pom.artifactId = projectName // 项目名称（通常为类库模块名称，也可以任意）
        pom.version = version // 版本号
    }
}


publishing {

    println "deploy version is >>>" + version
    publications {
        maven(MavenPublication) {

            version version
            groupId GROUP
            artifactId projectName

            artifact("${project.buildDir}/outputs/aar/" + projectName + "-" + "RELEASE.aar")

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                def providedCompiles = new HashSet();

                //提前处理 provide 依赖
                configurations.compileOnly.allDependencies.each {
                    println '--------compileOnly ' + it.toString() + '---------'
                    if (it.group != null && (it.name != null || "unspecified".equals(it.name)) && it.version != null) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                        dependencyNode.appendNode('scope', 'provided')
                        providedCompiles.add(it.group + "." + it.name)
                    }
                }

                configurations.implementation.allDependencies.each {
                    if (it.group && !providedCompiles.contains(it.group + "." + it.name)) {
                        println '--------implementation--------  ' + it.toString() + '---------'
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                        //只针对compile依赖 或者implement依赖增加 exclusions
                        if (it.excludeRules.size() > 0) {
                            def exclusionsNode = dependencyNode.appendNode('exclusions')
                            it.excludeRules.each { rule ->
                                def exclusionNode = exclusionsNode.appendNode('exclusion')
                                exclusionNode.appendNode('groupId', rule.group)
                                exclusionNode.appendNode('artifactId', rule.module)
                            }
                        }

                        println '--------excludeRules size ' + it.excludeRules.size()
                    }
                }
            }
        }
    }

    repositories {
        if (version.endsWith("-SNAPSHOT")) {
            maven {
                url "http://mvnrepo.alibaba-inc.com/nexus/content/repositories/snapshots"
                credentials {
                    username = "snapshotsAdmin"
                    password = "123456"
                }
            }
        }
    }
}

tasks.whenTaskAdded { task ->
    if (task.name.contains("generatePomFileForMavenPublication")) {
        println " >>>" + task.name
        task.dependsOn(build)
    }

}
